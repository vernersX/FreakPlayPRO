// src/components/BetFormModal/BetFormModal.jsx
import React, { useEffect, useState } from 'react';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { useLocation, useNavigate, Link } from 'react-router-dom';
import styles from './BetFormModal.module.css';
import { API_BASE_URL } from '../../config';
import CardWithCooldown from '../CardWithCooldown/CardWithCooldown';

function getOdds(selection, game) {
    if (selection === 'home') return game.homeOdds;
    if (selection === 'draw') return game.drawOdds;
    if (selection === 'away') return game.awayOdds;
    return 0;
}

export default function BetFormModal({ game, telegramId, onClose, onBetSuccess, backgroundImg }) {
    const [cards, setCards] = useState([]);
    const [selected, setSelected] = useState([]);             // array of selected card IDs
    const [selection, setSelection] = useState(null);         // 'home' | 'draw' | 'away'
    const [placedBet, setPlacedBet] = useState(null);

    const [showInventory, setShowInventory] = useState(false);
    const [showConfirmation, setShowConfirmation] = useState(false);
    const [loadingCards, setLoadingCards] = useState(true);
    const [error, setError] = useState('');
    const [closing, setClosing] = useState(false);

    const location = useLocation();
    const navigate = useNavigate();

    // prevent body scroll while modal open
    useEffect(() => {
        document.body.style.overflow = 'hidden';
        return () => { document.body.style.overflow = ''; };
    }, []);

    // load cards
    useEffect(() => {
        fetch(`${API_BASE_URL}/api/inventory/cards?telegramId=${telegramId}`)
            .then(res => res.json())
            .then(data => {
                setCards(data.filter(c => !c.isLocked));
                setLoadingCards(false);
            })
            .catch(() => setLoadingCards(false));
    }, [telegramId]);

    // check existing bet for this match
    useEffect(() => {
        async function checkExisting() {
            try {
                const res = await fetch(
                    `${API_BASE_URL}/api/bets/forMatch?telegramId=${telegramId}&matchId=${game.id}`
                );
                const bet = await res.json();
                if (bet) setPlacedBet(bet);
            } catch (err) {
                console.error(err);
            }
        }
        checkExisting();
    }, [telegramId, game.id]);

    // handle outcome selection
    function handleSelectOutcome(outcome) {
        setSelection(outcome);
        setShowInventory(true);
        setShowConfirmation(false);
    }

    // toggle card in selection array (max 3)
    function handleCardSelection(id) {
        setSelected(arr => {
            if (arr.includes(id)) return arr.filter(x => x !== id);
            if (arr.length < 3) return [...arr, id];
            return arr;
        });
    }

    // confirm inventory (must have â‰¥1 selected)
    function handleInventoryConfirm() {
        if (selected.length === 0) return;
        setShowInventory(false);
        setShowConfirmation(true);
    }

    // clear everything
    function handleClearSelection() {
        setSelected([]);
        setSelection(null);
        setShowConfirmation(false);
        setError('');
    }

    // slide down animation
    function handleStartClosing() {
        setClosing(true);
    }

    function handleAnimationEnd(e) {
        if (e.animationName === styles.slideDown) onClose();
    }

    function handleOverlayClick() {
        handleStartClosing();
    }

    function handleArrowClick() {
        if (location.pathname === '/matches') handleStartClosing();
        else navigate('/matches');
    }

    function formatDate(dateString) {
        const date = new Date(dateString);
        const day = date.getDate();
        const month = date.toLocaleString('en-GB', { month: 'short' }).toLowerCase();
        const hh = String(date.getHours()).padStart(2, '0');
        const mm = String(date.getMinutes()).padStart(2, '0');
        return (
            <>
                <span className={styles.dateMonth}>{day}. {month}</span>
                <span className={styles.dateTime}>{hh}:{mm}</span>
            </>
        );
    }

    // compute totals
    const totalValue = selected.reduce((sum, id) => {
        const c = cards.find(x => x.id === id);
        return c ? sum + c.baseValue : sum;
    }, 0);
    const odds = getOdds(selection, game);
    const potentialWin = odds
        ? (totalValue * odds).toFixed(2)
        : '0.00';

    // submit multi-card bet
    async function handleSubmit() {
        if (!selection || selected.length === 0) {
            setError('Please select an outcome and at least one card.');
            return;
        }
        setError('');
        try {
            console.log("placing bet with:", {
                telegramId,
                matchId: game.id,
                predictedOutcome: selection,
                cardIds: selected
            });
            const res = await fetch(`${API_BASE_URL}/api/bets`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    telegramId,
                    matchId: game.id,
                    predictedOutcome: selection,
                    cardIds: selected,
                }),
            });
            const data = await res.json();
            if (!res.ok) {
                setError(data.error || 'Error placing bet');
                toast.error(data.error || 'Error placing bet');
            } else {
                toast.success('Bet placed successfully!');
                onBetSuccess(data.bet);
            }
        } catch (err) {
            console.error(err);
            setError('Error placing bet');
            toast.error('Network error. Please try again.');
        }
    }

    return (
        <div>
            <div className={styles.overlay} onClick={handleOverlayClick} />

            <div
                className={`${styles.bottomSheet} ${closing ? styles.slideDown : ''}`}
                onAnimationEnd={handleAnimationEnd}
            >
                {/* header with background */}
                <div
                    className={styles.menuContainer}
                    style={{
                        background: `linear-gradient(to bottom, #251328 0%, #251328 1%, rgba(37,19,40,0.3) 50%, #251328 90%, #251328 100%), url('${backgroundImg}')`,
                        backgroundPosition: 'center',
                        backgroundSize: 'cover'
                    }}
                >
                    <div className={styles.navContainer}>
                        <p onClick={handleArrowClick} style={{ cursor: 'pointer' }}>Matches</p>
                        <div onClick={handleOverlayClick} style={{ cursor: 'pointer' }}>
                            <svg width="16" height="16" viewBox="0 0 16 16">
                                <path d="M1 1L15 15" stroke="white" strokeWidth="1.5" />
                                <path d="M1 15L15 1" stroke="white" strokeWidth="1.5" />
                            </svg>
                        </div>
                    </div>
                    <div className={styles.leagueLogoContainer}>
                        <svg xmlns="http://www.w3.org/2000/svg" width="80" height="74" viewBox="0 0 80 74" fill="none">
                            <path fill-rule="evenodd" clip-rule="evenodd" d="M54.0253 14.7425L53.914 13.3965L53.6115 11.0152L53.67 10.8757H54.1837L54.4719 10.9116L56.7517 10.9792L56.8687 10.9116L56.7803 10.8081L55.4477 9.46211L54.0824 8.29444L52.6442 7.23894L52.1592 5.94042L51.0064 3.352L50.8009 3.04139L49.7095 5.52627L49.5625 5.60105L47.8162 5.03591L46.214 4.59444L44.97 4.38737L44.5305 4.35429L44.4834 4.38737L48.2956 8.21823L48.3784 8.32176L48.3826 8.4253L47.2741 9.87482L45.9943 11.4279L46.0728 11.4811L48.5382 10.9778L49.7994 10.8066L50.4899 10.7362L50.6283 10.8066L51.4586 11.842L53.9825 15.391L54.0353 15.3623L54.0253 14.7425ZM33.5349 27.003L33.3294 27.0562L33.124 27.0288L32.3022 26.4766L29.8368 24.6015L29.4545 24.2664L29.3517 24.0593L29.2733 23.9558L28.4586 22.1957L28.1947 21.4436L27.868 20.4356L27.8594 20.2285L28.6541 19.2967L29.9424 18.0686L31.4832 16.7614L31.586 16.7557L31.6973 16.8118L36.2085 18.408L36.3383 18.5719L36.414 19.7309L36.6608 21.3674L36.8249 22.3136L36.8948 22.6098L37.2357 24.1715L37.0303 24.426L35.4895 25.6627L33.5349 27.003ZM36.6508 34.518L36.5894 34.0003L36.5481 32.8614L36.521 32.2402L36.568 31.4119L36.618 31.3702L37.4398 31.3429L39.8024 31.1085L39.9836 30.9992L39.4215 30.6886L39.2888 30.6411L36.9846 29.3426L36.7207 29.1959L36.5481 29.032L36.8562 26.6506L37.2771 24.2693L38.7752 21.7398L38.9178 21.4738L39.9836 19.7137H40.1334L41.1492 19.9208L44.9386 20.7073L45.8631 20.8813L45.893 20.8526L42.2977 16.8147L42.1451 16.6076L45.679 11.7414H45.5692L41.1378 12.9493L40.0079 13.2369L39.597 13.2714L39.3829 12.9824L38.467 11.6091L37.4398 9.96253L37.1373 9.46067L36.9675 9.2536L37.1658 8.52884L37.5824 7.2864L38.1988 5.94042L38.828 4.90505L38.9721 4.80152L39.4942 4.70373L40.336 4.59444L41.446 4.49666L41.7541 4.46358L43.0895 4.42188L44.2195 4.33704L44.248 4.28383L43.4505 3.86969L42.1921 3.352L40.8296 2.8904L40.4929 2.73222L40.52 2.68189L40.8282 2.34827L42.3691 1.00229L43.6074 0.0402643L43.499 0L43.0881 0.0589584L41.1221 0.454411L39.0819 0.999417L37.9077 1.38624L37.1302 1.74143L36.9247 1.76731L36.7193 1.71698L35.7948 1.52717L33.9458 1.25107L33.3437 1.18061L32.6104 1.13315L32.4862 1.17917L32.6746 1.59332L32.7145 1.72993L33.0854 2.62868L33.4878 3.87112L33.4264 3.97466L32.7858 4.49234L31.6559 5.63125L30.6058 6.87369L30.6586 6.92114L32.4991 6.35601L34.4594 5.80237L34.5293 5.83832L34.7147 6.04539L35.1784 6.72557L36.9105 9.25503L36.481 11.947L36.1315 14.6389L36.0016 14.7612L35.4652 14.9496L35.0771 15.1207L34.9359 15.1566L34.5635 15.3234L34.4223 15.3637L32.0454 16.3991L31.4818 16.6766L30.7628 16.7801L30.3376 16.8132L29.941 16.8693L28.6056 16.9685L27.0647 16.9815L26.9948 16.9182L26.9677 16.8147L26.8735 15.9864L26.7009 13.605L26.7209 10.9131L26.7494 10.3954L26.7608 9.98123L26.8222 9.67062L29.8368 7.31803L29.8939 7.18574L27.7809 7.11815L27.37 7.03618L27.3287 6.97866L27.7153 5.42561L28.1932 3.90564L28.2389 3.66549L28.1932 3.63529L27.2687 4.36292L26.1088 5.52771L25.0973 6.77015L24.2684 8.01259L23.468 9.48655L22.9258 10.7045L22.5149 11.8435L22.0983 13.5L21.9928 14.1213L22.0284 14.1687L23.8774 12.4791L24.802 11.6838L24.9403 11.7399L25.4183 12.3942L26.4527 13.7071L26.4969 13.8106L24.802 17.0505L24.538 17.6415L24.3911 17.7091L22.7475 18.188L21.823 18.5144L21.7759 18.5733L21.9257 18.8049L23.0557 19.9495L23.5165 20.3335L23.535 20.9547L23.2269 24.7855L23.5679 25.5563L23.6706 25.7332L23.779 25.7174L25.9975 22.5077L26.1359 22.4517L26.2315 22.5077L26.6224 22.7148L27.8765 23.4396L29.3204 24.2966L29.4787 24.4749L29.6471 24.9926L30.2506 26.4421L31.0096 28.0987L31.0053 28.2023L30.9639 28.2526L27.5512 29.6518L26.9577 29.9351L26.9335 29.9624L28.2931 30.4096L29.7312 30.7432L30.7585 30.9273L32.5048 31.1487H32.6075L32.8372 31.3069L35.2783 34.3569L35.8946 35.0486L36.4083 35.1018H36.6137L36.7221 35.0342L36.6508 34.518ZM42.1636 35.3794L43.3963 35.1996L44.9371 34.8617L46.478 34.3382L48.1216 33.5905L49.8679 32.5637L51.1947 31.6175L52.3646 30.6857L52.2319 30.6569L51.4101 30.7547L47.7121 31.1545L47.6493 31.0984L47.5908 29.7524L47.5552 27.9923L47.6108 27.8528L49.1516 27.2949L51.0078 26.5414L51.2061 26.4594L52.1306 25.9618L52.2333 25.9676L52.3289 26.0237L53.466 26.5701L53.6387 26.6449L55.0069 27.1913L55.0597 27.1626L55.0069 25.5894L54.9099 24.0565L54.877 23.7459L54.9826 23.5388L55.2123 23.3461L56.0341 22.4143L56.8559 21.2035L57.5749 19.8647L57.9117 19.0867L57.8831 19.0579L57.2668 19.3571L57.1255 19.3973L56.7532 19.5641L55.0069 20.1853L54.6987 20.2673L54.6017 20.1221L54.1494 17.016L54.1152 16.6018L53.9853 15.9806L53.1578 17.6875L52.2333 19.37L51.6798 20.3291L51.2061 21.0065L50.4728 21.0539L50.3843 21.0899H46.9945L46.7063 21.0539L46.3781 21.0654L46.3496 21.1574L47.3026 22.1986L49.5183 24.2635L49.4784 24.4706L48.912 25.506L47.8705 27.1626L46.3339 29.3368L45.0113 30.8899L44.5277 31.386L43.0895 31.3601L42.3248 31.304L40.6242 31.2365L40.4187 31.271V31.3184L41.7541 32.5609L42.3705 33.0944L42.5617 33.2712L42.5331 33.4783L41.9596 34.124L40.9324 34.9638L40.249 35.4455L40.4187 35.4786L41.4745 35.4455L42.1636 35.3794ZM42.6116 46.9424L42.7058 46.5283L42.7799 46.3974L42.8627 46.4247L44.5262 46.7267L44.6432 46.2176V46.0106L43.1908 45.7273L42.8827 45.6051L43.0382 44.7681L43.0881 44.7264L43.3078 44.7681L44.8344 45.0342L44.9371 44.679L44.9771 44.354L42.526 43.8363L42.2678 43.8004L42.165 43.8521L41.406 47.8757L41.8569 48.008L42.3919 48.0827L42.6116 46.9424ZM54.3634 47.7707V47.6672L53.1792 46.5283L51.7511 45.3894L50.3387 44.4575L49.0546 43.7328L47.4567 43.008L46.02 42.4903L44.5291 42.0834L43.091 41.8087L41.7556 41.629L40.7868 41.5585L38.982 41.5657L36.9076 41.7656L35.2683 42.0762L33.4635 42.5939L32.0896 43.1115L30.5502 43.8363L28.9637 44.7681L27.9222 45.4929L26.6538 46.4995L25.4069 47.6672L25.4454 47.7707L25.832 48.1345L25.949 48.0813L26.6538 47.3867L28.092 46.1659L29.6328 45.1133L30.603 44.5596L31.8428 43.9384L33.4336 43.2899L35.1799 42.765L36.5352 42.4903L37.0289 42.4199L37.337 42.3508L38.1731 42.2833L38.9806 42.2157L41.0351 42.2272L41.6314 42.2833L42.4732 42.3508L42.7814 42.4199L43.295 42.4961L44.6304 42.765L44.8358 42.834L45.0912 42.9045L46.1185 43.2151L47.4039 43.6767L47.5066 43.7543L48.123 43.9988L48.2257 44.0707L48.3983 44.1455L49.5611 44.7595L50.7938 45.5188L51.9237 46.3471L53.1564 47.3853L53.8755 48.0943L53.9782 48.1331L54.3634 47.7707ZM38.6468 47.8742L38.6525 47.7707L38.5412 47.253L38.4656 47.1552L36.6166 47.5478L36.5138 47.4888L36.3298 46.6304L36.4111 46.5484L37.7465 46.2493L38.1574 46.1386V46.0451L38.0875 45.6971L38.019 45.49L37.952 45.4469L37.6438 45.4972L36.2057 45.7963L36.1358 45.6985L36.0002 45.0917V44.9479L37.5411 44.5927L37.8492 44.5165L37.9006 44.4547L37.7793 43.8334L37.7465 43.7932L37.4754 43.8334L34.8703 44.4144L34.8275 44.4547L35.0757 45.7115L35.692 48.5257L38.6468 47.8742ZM49.3542 49.4546L48.5325 48.8808L48.3884 48.7025L49.6624 47.8153L49.7494 47.8742L49.4356 49.3237L49.3542 49.4546ZM31.0695 51.209L31.5589 50.8768L31.8913 50.5806L32.1995 50.1981L32.4334 49.7379L32.4734 49.3237L32.4277 48.8061L32.2337 48.3919L30.6814 46.3212L30.5573 46.278L29.8168 46.8389L29.8382 46.9482L31.3391 48.9096L31.4476 49.2202L31.4376 49.6344L31.2607 49.945L30.8641 50.3189L30.3504 50.4972L29.9395 50.4023L29.6456 50.1506L28.2075 48.2869L28.0905 48.1892L27.3715 48.7514L27.3244 48.8046L27.3715 48.9225L29.015 51.0077L29.4259 51.3039L29.8368 51.429L30.3504 51.4319L30.6087 51.3916L31.0695 51.209ZM50.8209 47.253L49.9363 46.6318L49.8693 46.5915L49.7295 46.6318L46.1341 49.0131L46.1712 49.1311L46.993 49.6631L47.7121 49.1857L47.762 49.2217L49.2287 50.257L49.1688 50.6712L49.116 50.8782L49.0817 51.0853L49.1488 51.2176L49.8679 51.7209L49.9848 51.7065L50.8209 47.253ZM48.6352 53.4954L48.7022 53.3617L48.1216 52.7649L47.1271 51.9122L45.8873 51.0839L44.6618 50.4627L44.5262 50.4224L44.1539 50.2556L43.6017 50.0758L42.3833 49.7379L41.0522 49.5308L39.5941 49.4834L38.7523 49.5308L37.4169 49.7379L36.2042 50.0672L35.3825 50.3649L34.2767 50.8754L33.2609 51.4966L32.2765 52.2213L31.1565 53.2567L31.0923 53.3602L31.118 53.4638L31.479 53.8046L31.596 53.7744L32.4035 52.9763L33.231 52.3249L34.2525 51.6404L34.9216 51.2895L35.8718 50.8754L36.9233 50.523L38.3614 50.2268L39.9023 50.1161L40.3588 50.152L41.4431 50.2283L42.5845 50.4627L43.3221 50.6697L44.1139 50.9444L45.3466 51.534L46.4766 52.2501L47.5038 53.0813L48.2229 53.806L48.3413 53.7758L48.6352 53.4954ZM23.3653 60.651H21.619L21.5776 60.6093L21.5647 60.5057L22.338 58.445L22.5021 57.9173L22.6462 57.7246L22.7161 57.8138L23.1798 59.6774L23.4252 60.5057L23.3653 60.651ZM57.6748 63.1286L57.0585 63.0496L56.5449 62.8267L56.0312 62.3306L55.5761 61.6432L55.2922 60.8149L55.1424 59.9866L55.1624 58.9512L55.3707 58.2265L55.6789 57.7088L55.8729 57.5017L56.3394 57.1465L56.8816 56.984L57.3666 56.9279L57.6862 56.984L58.1884 57.1465L58.7021 57.5233L59.0659 57.9159L59.3683 58.4335L59.6722 59.4689L59.7835 60.4007L59.7279 60.904L59.6608 61.3326L59.4197 61.9207L59.1615 62.3679L58.8033 62.703L58.3925 62.9489L57.8788 63.0869L57.6748 63.1286ZM50.8951 63.7829L51.0563 63.7154L50.9222 63.5083L50.8994 56.8819L50.9336 56.4678L51.2332 56.1572L51.2118 56.0536L50.6882 56.1241L49.4555 56.1514L48.6337 56.0781L48.5553 56.1572L48.9919 56.3642L49.0874 56.4678L49.1402 56.7784L49.1645 58.1244L49.1816 63.4047L49.1131 63.6118L48.9419 63.7901L48.8692 63.8189L49.0446 63.8865L50.7082 63.8189L50.8951 63.7829ZM70.6864 57.9173L70.7221 57.7246L70.6665 57.1925L70.7264 56.9855L70.685 56.7784L70.7535 56.4678L70.822 56.37L71.0274 56.2003L71.2329 56.1787L71.2856 56.0536L71.1301 56.0047L70.5138 56.0723L70.0002 56.0896L69.5451 56.0536L68.9729 56.0134L68.9145 56.0536L68.9202 56.1572L69.0757 56.1902L69.2811 56.2046L69.5608 56.4678L69.6435 56.6749L69.6863 61.1269L69.5893 61.2779L69.4866 61.1974L66.1324 56.1572L66.0054 56.0536L65.7885 56.0896L64.3504 56.1097L63.7926 56.0536L63.5286 56.0249L63.4987 56.1572L63.7968 56.2607L64.0151 56.4678L64.0779 56.6749L64.0608 58.7456L64.0365 60.7128L64.0137 63.4047L63.8368 63.6363L63.6313 63.7427L63.5286 63.7585L63.4758 63.8175L63.5286 63.9267L63.7341 63.885L64.5559 63.8505L65.7885 63.8951L65.8413 63.816L65.7885 63.7571L65.3776 63.6535L65.2749 63.5615L65.1365 63.2983L65.1023 61.5382L65.0752 60.7099L65.1037 57.8109L65.1722 57.7491L65.2464 57.8109L65.4276 58.018L69.3924 63.9196L69.692 63.9526H70.6165L70.675 63.9181L70.6864 57.9173ZM17.4301 63.9224L16.9978 63.7657L16.8595 63.5083L16.8138 59.781L16.7967 57.089L16.8666 56.5713L17.0378 56.3642L17.3574 56.2607L17.413 56.1572L17.3046 56.0896L16.5855 56.1759L15.4556 56.1931L15.0732 56.1572L14.5311 56.1227L14.4726 56.1572L14.4797 56.2607L14.8407 56.37L14.9676 56.4678L15.0404 56.6749L15.0518 58.435L15.0803 58.9527L15.0447 59.2877L14.5311 59.3524H11.963L11.8417 59.2633L11.8246 57.9173L11.8931 56.5713L12.167 56.301L12.3724 56.2665L12.4252 56.1572L12.3724 56.1212L11.3452 56.2003L10.5234 56.1946L10.1411 56.1586L9.59892 56.1227L9.50475 56.1586V56.2621L9.90709 56.3959L10.0369 56.5728L10.0783 57.8152L10.0897 59.0576L10.1054 60.6107L10.0783 62.0602L10.0597 63.5097L9.90566 63.7729L9.70021 63.8721L9.49477 63.9023L9.4805 64.0274L9.59749 64.0605L10.1111 63.9915H10.9329L11.3894 64.0274L12.3724 64.0806L12.4395 64.0274L12.3967 63.9239L12.167 63.8563L11.8988 63.6133L11.8817 63.5097L11.866 61.8531L11.8246 60.8178L11.8603 60.5489L11.963 60.4381H14.942L15.0504 60.5086L15.0789 61.0263V61.8546L15.0375 62.1652L15.029 63.4076L14.9848 63.6147L14.7351 63.8405L14.4883 63.9253L14.4269 64.0346L14.6324 64.0777L15.4684 64.0303L15.5569 63.9943H16.4814L16.9379 64.0303H17.3716L17.4301 63.9224ZM26.7951 63.9224L26.3442 63.6363L26.2415 63.4896L25.4811 61.4375L23.7162 56.1572L23.6734 56.1169L23.0571 56.1759L22.338 56.1931L22.0498 56.1572L21.4135 56.104L21.3807 56.1572L21.5162 56.2895L21.7217 56.3786L21.8301 56.4678L21.8786 56.5713L21.7559 56.9855L20.5903 59.8759L20.3849 60.3691L19.5303 62.4729L19.2549 63.1445L18.9967 63.6118L18.844 63.7599L18.6229 63.8189L18.5358 63.9325L18.6386 64.0073L19.4603 63.9569L20.5903 63.9713L21.0283 64.0274L21.0954 63.9239L20.693 63.7671L20.5903 63.6636L20.509 63.5097L20.5261 63.1991L21.0683 61.7496L21.2066 61.5483L21.4121 61.4879L23.5693 61.508L23.7077 61.544L23.8218 61.751L24.237 63.2005L24.2498 63.5112L24.0658 63.7182L23.7761 63.8635L23.6263 63.9253L23.6734 64.0346L23.9374 64.0288L24.0843 63.9929L25.8306 63.9728L26.4926 64.0288L26.7551 64.0576L26.7951 63.9224ZM38.2658 63.9224L37.8492 63.7786L37.6438 63.5787L37.5468 62.7835L37.3413 60.1951L37.2999 59.988L37.2657 59.1597L37.2044 58.5385L37.1345 56.5713L37.2072 56.3642L37.3342 56.2823L37.5396 56.2161L37.6181 56.1572L37.5482 56.0536L36.5124 56.1241L35.2797 56.1054L35.0743 56.0824L34.9502 56.2621L33.094 61.439L33.0198 61.521L32.9171 61.4965L32.0953 59.4387L31.0681 56.8604L30.7884 56.1586L30.6572 56.091L29.0136 56.1529L28.1918 56.0997L28.1519 56.1586L28.2945 56.2909L28.5 56.3197L28.6698 56.4707L28.6997 56.8848L28.6298 59.3697L28.597 59.6803L28.3973 62.7576L28.3459 63.5112L28.1747 63.7182L28.0905 63.7815L27.6739 63.9253L27.7239 64.0288L28.6027 63.9728L29.6299 63.9929L30.0123 64.0288L30.349 64.0576L30.3847 63.9253L29.8354 63.7542L29.6827 63.6147L29.5843 63.4076L29.5757 62.8899L29.6114 60.7157L29.6984 58.1272L29.8368 58.0798L29.8925 58.1272L30.0423 58.5644L31.7458 62.7864L31.8913 63.2106L32.1995 63.9857L32.3022 64.0634H33.124L33.2181 64.0303L33.2738 63.9267L33.9272 62.0631L34.1983 61.2348L34.2539 61.1543L35.2255 58.3358L35.3839 58.0582L35.4723 58.1287L35.6592 60.4065L35.762 61.856L35.7948 62.4916L35.8304 62.6843L35.8133 63.4091L35.692 63.6406L35.4866 63.7829L35.04 63.9267L35.0757 64.036L36.0002 63.9756L37.2329 63.9958L37.6894 64.0317H38.2516L38.2658 63.9224ZM43.2251 63.9224L42.7799 63.7786L42.4718 63.5327L42.4161 63.4047L42.3905 62.2658L42.3748 59.5739L42.4161 57.1925L42.4718 57.1451L43.6017 57.1566L43.7929 57.1925L44.1153 57.2357L44.6047 57.5032L44.9029 57.8138L45.1055 58.435L45.1026 59.1597L44.9799 59.5739L44.6275 60.0772L44.4221 60.2598L43.9085 60.4698L43.6003 60.5345L43.1894 60.5417L42.8584 60.5057L42.6758 60.4726L42.6401 60.5057L42.6758 60.7042L43.1894 60.9544L43.8058 61.0852L44.6275 61.0766L44.9885 61.0248L45.2439 60.9544L45.7489 60.7142L46.2469 60.3001L46.5793 59.8615L46.7576 59.4718L46.8932 58.8506L46.8461 58.1258L46.7105 57.6081L46.3881 57.0904L46.1827 56.8834L45.5592 56.4692L44.95 56.2621L44.2167 56.1946L43.9285 56.1586L40.1077 56.1183L40.0136 56.1586L40.0293 56.2621L40.4159 56.3944L40.5814 56.5728L40.6156 61.9567L40.57 63.4062L40.4829 63.6133L40.3132 63.7844L40.1905 63.8203L40.005 63.9469V64.0418L40.3132 64.0605L40.8268 63.9915H42.4704L42.8527 64.0274H43.1965L43.2251 63.9224ZM58.8048 63.9555L59.5238 63.6176L60.1159 63.1977L60.4483 62.9014L60.7565 62.5189L61.1674 61.7855L61.3543 61.229L61.5098 60.5043L61.5041 59.4689L61.3044 58.6406L61.0989 58.1229L60.6823 57.3982L60.2186 56.8805L59.6936 56.4663L59.1129 56.1744L58.3796 55.9487L57.6748 55.8811L56.7503 55.9156L55.8757 56.1557L55.2537 56.4663L54.6816 56.8805L54.285 57.3033L53.8741 57.9403L53.5445 58.7442L53.4018 59.5724L53.4147 60.5043L53.4817 60.9184L53.6686 61.5785L53.9768 62.2083L54.4904 62.9029L54.9013 63.307L55.5176 63.7369L56.2367 64.0475L56.9558 64.177L57.6748 64.1856L58.2027 64.1295L58.8048 63.9555ZM77.8086 64.0403L78.6304 63.7441L79.144 63.4191L79.5549 63.0064L79.863 62.4801L79.9943 62.0588L80 61.334L79.9001 61.0234L79.6647 60.5057L79.4536 60.2512L79.0427 59.8931L78.3507 59.5739L77.3991 59.282L76.1664 58.9153L75.6528 58.7168L75.3446 58.5241L75.1035 58.2279L75.0422 57.9173L75.0836 57.5032L75.289 57.1925L75.6528 56.9294L76.2692 56.7424L76.9882 56.7223L77.3848 56.7784L77.7843 56.8819L78.1196 57.02L78.5162 57.2961L78.7602 57.5032L79.1126 58.0208L79.2838 58.435L79.3508 58.4681L79.435 58.3314L79.3566 57.089L79.3237 56.7784L79.3166 56.2607L79.2653 56.1572L78.8586 56.0536L77.459 55.8466L76.2706 55.8538L75.4488 55.9573L74.7297 56.1773L74.179 56.4692L73.791 56.7798L73.4628 57.2975L73.2688 57.9187L73.2616 58.54L73.3929 58.9987L73.6654 59.4718L74.112 59.9003L74.9337 60.3217L77.4234 61.1284L77.7073 61.2751L77.9755 61.5425L78.1453 61.9567L78.1524 62.1637L78.014 62.5448L77.8086 62.8094L77.3977 63.0668L77.1922 63.1617L76.7813 63.2538H75.8568L75.2405 63.1502L74.6242 62.8439L74.2275 62.4729L73.8494 61.9552L73.6112 61.2305L73.4942 61.1974L73.4471 61.334L73.5584 63.7154L73.8038 63.8477L74.831 64.0835L75.5501 64.1784L76.5773 64.187L77.3164 64.1309L77.8086 64.0403ZM5.59414 64.177L6.51865 63.9497L7.44315 63.5212L7.54588 63.4277L7.6486 62.8022L7.7071 62.1609L7.6486 62.1077L7.38466 62.2658L7.13498 62.4255L6.99945 62.4729L6.41592 62.749L5.90231 62.9144L5.38869 62.9748L4.77235 62.9561L4.15601 62.8425L3.77793 62.6786L3.6424 62.6311L3.2472 62.3679L2.71789 61.8747L2.34694 61.3326L2.06017 60.7114L1.86043 59.7795V59.2618L2.03164 58.4335L2.24279 57.9159L2.66224 57.2946L3.12878 56.8359L3.74512 56.5138L4.5669 56.334L4.87507 56.3269L5.16327 56.3628L5.59414 56.439L6.21048 56.7266L6.72409 57.2155L6.97377 57.6053L7.13498 58.0553L7.23771 58.0525L7.27338 58.018L7.24342 56.7755L7.20204 56.5684V55.5331L7.14069 55.4295L6.1263 55.2225L5.07909 55.1549L4.02333 55.2225L3.10024 55.4295L2.37405 55.7402L1.73773 56.1543L1.15992 56.672L0.749024 57.1897L0.319583 58.018L0.114137 58.6392L0 59.4703L0.019974 60.2986L0.253955 61.2837L0.562124 61.9811L1.04578 62.6786L1.69208 63.3285L2.30842 63.7355L3.02748 64.0461L4.05471 64.2532L5.08195 64.2647L5.59414 64.177ZM35.8647 71.2735L35.7948 71.344H34.5621L34.4922 71.2735V71.17L34.7675 70.4726L35.1371 69.4099L35.2812 69.1611L35.3311 69.2028L35.7948 70.996L35.8618 71.17L35.8647 71.2735ZM21.1053 73.826H22.8516L24.9061 73.8016L24.9389 73.7584V73.4478L25.1501 72.1018L25.1101 72.0227L25.0074 72.0069L24.8761 72.2054L24.8291 72.4124L24.6507 72.7231L24.4924 72.8827L24.1842 73.0006L23.2454 73.0337L23.157 73.0696H22.1297L22.027 73.0006L21.9714 72.8266L21.9913 68.271L22.0855 68.0639L22.5677 67.8568L22.5392 67.7648L22.4935 67.7533L22.0241 67.8094H20.586L20.2037 67.7533H20.1694L20.1395 67.8568L20.4833 68.0193L20.5646 68.1674L20.586 71.0463L20.5532 73.4478L20.4833 73.5758L20.2779 73.7182L20.1509 73.7584L20.1751 73.8677L20.9527 73.862L21.1053 73.826ZM31.3235 73.0337L31.3791 72.6339L31.4148 72.2054L31.3791 72.1464L31.2764 72.1378L31.1737 72.214L31.0238 72.7231L30.8655 72.9546L30.66 73.061L29.4274 73.1027L28.092 73.0524L28.0363 72.9301L28.0278 71.2735L28.0905 71.1197L28.1932 71.101L29.6314 71.111L29.7255 71.1714L29.8811 71.275L30.0423 71.6143L30.1336 71.5856L30.1507 71.482L30.1093 71.275V70.7573L30.1379 70.2396L30.1493 69.929L30.0408 69.8758L29.8197 70.2396L29.7327 70.3072L28.0891 70.3043L28.0335 70.241L28.0534 68.688L28.1918 68.5902L30.5545 68.6405L30.6158 68.688L30.9254 68.9986L31.0196 69.3092L31.0666 69.3423L31.1194 69.3092L31.0581 67.8597L30.7585 67.8266H26.2387L26.1987 67.8597L26.3 67.9632L26.4441 67.9992L26.6096 68.1703L26.6838 70.9658V72.4153L26.6424 72.6224L26.6139 73.4507L26.4427 73.6232L26.1844 73.7613L26.2372 73.8203L27.6183 73.8648L31.1679 73.9051L31.2849 73.8648L31.3235 73.0337ZM59.9005 73.6549L59.9633 72.7231L59.9747 72.1018L59.9347 72.0587L59.832 72.0486L59.5738 72.7231L59.3184 73.0035L59.257 73.0337L59.0102 73.0811L56.7503 73.1041L56.6619 73.0337L56.6533 71.8948L56.6119 71.6877V71.3771L56.6476 71.2232L57.1612 71.1513L58.0857 71.134L58.3154 71.17L58.4567 71.2735L58.5993 71.5899L58.7235 71.5841L58.7078 71.0665L58.6664 70.8594V70.5488L58.7349 69.824L58.7021 69.7909L58.5708 69.824L58.5308 70.0311L58.3925 70.208L58.187 70.2943L56.7489 70.3848L56.6105 70.2396V69.5149L56.6718 68.6866L56.7475 68.6305L58.4938 68.5888L59.2128 68.6233L59.2827 68.6866L59.4739 68.8936L59.521 69.1539L59.6237 69.2416L59.7321 69.2057L59.638 67.7562L59.521 67.7274L58.6992 67.7907L55.6175 67.8525L54.8984 67.8094L54.8143 67.8583L54.8984 67.9676L55.1039 68.0409L55.2423 68.2724L55.2765 71.0679L55.2266 73.5528L55.1053 73.675L54.7971 73.8533L54.8999 73.9108L59.8306 73.8907L59.8634 73.862L59.9005 73.6549ZM36.7193 73.8677L38.2601 73.7987L38.3001 73.7584L38.0047 73.4478L37.8778 73.0337L36.1315 67.8568L36.0002 67.8238L35.692 67.8856L35.0757 67.8928L34.7875 67.8568L34.3566 67.8209L34.3238 67.8568L34.3566 67.9747L34.5621 68.0395L34.7005 68.271L33.0212 72.3894L32.5433 73.5513L32.4049 73.6908L32.1053 73.862L32.2137 73.9655L32.5076 73.9094H33.6376L34.0285 73.9655H34.0542L34.0841 73.862L33.9458 73.8145L33.7046 73.6549L33.6704 73.4478L33.776 73.0337L34.1441 72.1018L34.2525 72.0328H36.1015L36.17 72.1018L36.5581 73.3443L36.5538 73.5513L36.4097 73.6908L36.0616 73.862L36.1015 73.9569L36.2185 73.9655L36.7193 73.8677ZM43.1908 73.8835L43.7829 73.6549L44.3208 73.2738H44.4235L44.532 73.3443L44.629 73.6606L44.7317 73.78L45.0399 73.7872L45.1069 73.6549V71.5841L45.2367 71.3771L45.5535 71.1758L45.6105 71.0665L44.629 71.1369H43.8072L43.7487 71.17L43.8543 71.4806L43.8771 72.3089L43.85 72.516L43.6916 72.8266L43.3977 73.0524L42.9868 73.2005L42.3705 73.1832L41.9924 73.0322L41.8569 72.9848L41.5487 72.7461L41.2691 72.411L40.9752 71.8933L40.794 71.1686L40.774 70.7544L40.8682 70.0297L41.0736 69.512L41.3418 69.1136L41.8112 68.6837L42.3691 68.4162L42.9854 68.317L43.3078 68.3731L43.7801 68.4766L44.1153 68.6276L44.4792 68.9943L44.6932 69.4084L44.7331 69.5264L44.8358 69.5508L44.8758 69.5105L44.8415 68.2681L44.7759 68.061L44.589 67.9575L44.0141 67.7921L43.1466 67.6469H42.7657L42.2663 67.7159L41.9582 67.7777L41.3661 67.9575L40.7826 68.2681L40.2846 68.6822L40.0064 69.0173L39.7724 69.407L39.5627 70.0311L39.4871 71.3771L39.6983 72.1967L40.0064 72.7475L40.3388 73.1372L40.9309 73.5801L41.65 73.8763L42.4718 73.9712L43.1908 73.8835ZM51.4087 73.895L51.7169 73.7944L52.2305 73.5657L52.4359 73.3745L52.6414 73.0854L52.7726 72.7216L52.8126 70.7544L52.8483 70.5617L52.854 68.9943L52.901 68.0625L53.0537 67.9086L53.2591 67.8698L53.2649 67.7518H53.0337L52.5401 67.8079L51.6156 67.795L51.5129 67.8712L51.5485 68.0639L51.5685 71.8948L51.4658 72.6195L51.286 72.9301L50.9992 73.1933L50.7938 73.2695L50.3829 73.34L49.7666 73.3169L49.3557 73.1947L49.076 72.9316L48.8906 72.621L48.8492 71.9997L48.8078 71.7927V70.4467L48.8435 70.254L48.8906 68.0653L48.9462 68.0035L49.1659 67.8583L49.1516 67.7777L48.1244 67.8525L47.4053 67.818L47.3725 67.8583L47.4153 67.9618L47.5637 68.1689L47.6122 72.3247L47.8177 72.9373L48.1258 73.3601L48.6395 73.6894L48.7422 73.7038L48.8449 73.7742L49.564 73.931L50.0776 74L50.8994 73.9943L51.4087 73.895Z"
                                fill="white" />
                        </svg>
                    </div>
                    <div className={styles.gameContainer}>
                        <div className={styles.teamLogoContainer}>
                            <svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 21 21" fill="none">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M7.76804 0.358932C5.26169 1.03246 3.1258 2.6104 1.73178 4.72135L3.80255 5.28223L7.76804 2.40114V0.358932ZM0.977056 6.07097C0.350094 7.41673 0 8.91748 0 10.5C0 11.6358 0.180348 12.7295 0.513971 13.754L2.8836 14.0031L4.86391 11.3307L3.3651 6.7178L0.977056 6.07097ZM3.14445 17.9931C2.35602 17.219 1.68922 16.3215 1.17534 15.3318L2.61086 15.4827L3.14445 17.9931ZM4.9848 19.4366C6.5876 20.4279 8.47699 21 10.5 21C11.089 21 11.6666 20.9515 12.2292 20.8583C12.0422 20.6816 11.9556 20.417 12.0108 20.1573L13.1117 14.9781L10.9718 12.2166H6.07438L4.0351 14.9686L4.9848 19.4366ZM19.482 15.9412C18.2787 17.9233 16.4378 19.4754 14.2439 20.3129L13.5913 19.9361L14.5379 15.4827L19.0659 15.0068L19.482 15.9412ZM20.3383 14.1767C20.7661 13.0324 21 11.7935 21 10.5C21 9.63754 20.896 8.79937 20.6999 7.99734L16.8215 5.86435L13.671 6.71778L12.1753 11.3209L14.2546 14.0042L19.451 13.458C19.7742 13.4241 20.0824 13.6021 20.2146 13.8989L20.3383 14.1767ZM18.3221 3.49525C18.9559 4.20253 19.4952 4.99626 19.9201 5.85658L17.8522 4.71935L18.3221 3.49525ZM17.1469 2.37129C15.3365 0.889235 13.0221 0 10.5 0C10.0832 0 9.67213 0.0242819 9.26804 0.0715081V2.40114L13.2335 5.28223L16.3539 4.43695L17.1469 2.37129ZM4.83464 6.38647L8.51804 3.71033L12.2014 6.38647L10.7945 10.7166H6.24158L4.83464 6.38647Z" fill="#F2F2F2" />
                            </svg>
                        </div>
                        <div className={styles.matchTime}>
                            <p>{formatDate(game.commenceTime)}</p>
                        </div>
                        <div className={styles.teamLogoContainer}>
                            <svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 21 21" fill="none">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M7.76804 0.358932C5.26169 1.03246 3.1258 2.6104 1.73178 4.72135L3.80255 5.28223L7.76804 2.40114V0.358932ZM0.977056 6.07097C0.350094 7.41673 0 8.91748 0 10.5C0 11.6358 0.180348 12.7295 0.513971 13.754L2.8836 14.0031L4.86391 11.3307L3.3651 6.7178L0.977056 6.07097ZM3.14445 17.9931C2.35602 17.219 1.68922 16.3215 1.17534 15.3318L2.61086 15.4827L3.14445 17.9931ZM4.9848 19.4366C6.5876 20.4279 8.47699 21 10.5 21C11.089 21 11.6666 20.9515 12.2292 20.8583C12.0422 20.6816 11.9556 20.417 12.0108 20.1573L13.1117 14.9781L10.9718 12.2166H6.07438L4.0351 14.9686L4.9848 19.4366ZM19.482 15.9412C18.2787 17.9233 16.4378 19.4754 14.2439 20.3129L13.5913 19.9361L14.5379 15.4827L19.0659 15.0068L19.482 15.9412ZM20.3383 14.1767C20.7661 13.0324 21 11.7935 21 10.5C21 9.63754 20.896 8.79937 20.6999 7.99734L16.8215 5.86435L13.671 6.71778L12.1753 11.3209L14.2546 14.0042L19.451 13.458C19.7742 13.4241 20.0824 13.6021 20.2146 13.8989L20.3383 14.1767ZM18.3221 3.49525C18.9559 4.20253 19.4952 4.99626 19.9201 5.85658L17.8522 4.71935L18.3221 3.49525ZM17.1469 2.37129C15.3365 0.889235 13.0221 0 10.5 0C10.0832 0 9.67213 0.0242819 9.26804 0.0715081V2.40114L13.2335 5.28223L16.3539 4.43695L17.1469 2.37129ZM4.83464 6.38647L8.51804 3.71033L12.2014 6.38647L10.7945 10.7166H6.24158L4.83464 6.38647Z" fill="#F2F2F2" />
                            </svg>
                        </div>
                    </div>
                    <div className={styles.sheetHeader}>
                        <h3 className={styles.nameTeam}>{game.homeTeam}</h3>
                        <h3>VS</h3>
                        <h3 className={styles.nameTeam}>{game.awayTeam}</h3>
                    </div>
                </div>

                {placedBet ? (
                    <div className={styles.chosenBetContainer}>
                        <div className={styles.chosenTeamContainer}>
                            <p>Winner</p>
                            <p>
                                {placedBet.selection === 'home'
                                    ? game.homeTeam
                                    : placedBet.selection === 'draw'
                                        ? 'Draw'
                                        : game.awayTeam
                                } x{placedBet.odds}
                            </p>
                            <p>Status: {placedBet.status}</p>
                        </div>

                        {placedBet.Cards && placedBet.Cards.length > 0 && (
                            <div className={styles.cardPreview}>
                                {placedBet.Cards.map(card => (
                                    <CardWithCooldown
                                        key={card.id}
                                        imageUrl={card.imageURL}
                                        altText={card.rarity}
                                        cooldownUntil={card.cooldownUntil}
                                        className={styles.cardImg}
                                    />
                                ))}
                            </div>
                        )}
                    </div>
                ) : (
                    <>
                        {/* outcome selection */}
                        <div className={styles.outcomeContainer}>
                            <p className={styles.outcomeTitle}>Winner</p>
                            <div className={styles.selectionRow}>
                                {['home', 'draw', 'away'].map(opt => (
                                    game[opt + 'Odds'] != null && (
                                        <div
                                            key={opt}
                                            className={`${styles.selectionBox} ${selection === opt ? styles.selected : ''}`}
                                            onClick={() => handleSelectOutcome(opt)}
                                        >
                                            <p>{opt === 'home' ? 'Team 1' : opt === 'draw' ? 'Draw' : 'Team 2'}</p>
                                            <span className={styles.teamOdds}>x{game[opt + 'Odds']}</span>
                                            <svg className={styles.plusIcon} width="16" height="16" viewBox="0 0 16 16">
                                                <path d="M1 1L15 15" stroke="white" strokeWidth="1.5" />
                                                <path d="M1 15L15 1" stroke="white" strokeWidth="1.5" />
                                            </svg>
                                            <p className={styles.selectionText}>Select cards</p>
                                        </div>
                                    )
                                ))}
                            </div>
                        </div>
                    </>
                )}
            </div>

            {/* Inventory sheet */}
            {showInventory && (
                <>
                    <div className={styles.overlay} onClick={() => setShowInventory(false)} />
                    <div className={styles.inventorySheet}>
                        <div className={styles.inventoryTop}>
                            <h2 className={styles.inventoryTitle}>Select up to 3 cards</h2>
                            <div onClick={handleOverlayClick} style={{ cursor: 'pointer' }}>
                                <svg width="16" height="16" viewBox="0 0 16 16">
                                    <path d="M1 1L15 15" stroke="white" strokeWidth="1.5" />
                                    <path d="M1 15L15 1" stroke="white" strokeWidth="1.5" />
                                </svg>
                            </div>
                        </div>
                        <hr />
                        <div className={styles.inventoryContent}>
                            {loadingCards
                                ? <p>Loading cards...</p>
                                : cards.length === 0
                                    ? <p>No available cards.</p>
                                    : (
                                        <div className={styles.cardList}>
                                            {cards.map(card => {
                                                const isSel = selected.includes(card.id);
                                                return (
                                                    <div
                                                        key={card.id}
                                                        className={`${styles.cardItem} ${isSel ? styles.cardSelected : ''}`}
                                                        onClick={() => handleCardSelection(card.id)}
                                                    >
                                                        <CardWithCooldown
                                                            imageUrl={card.imageURL}
                                                            altText={card.rarity}
                                                            cooldownUntil={card.cooldownUntil}
                                                            className={styles.cardImg}
                                                        />
                                                    </div>
                                                );
                                            })}
                                        </div>
                                    )
                            }
                        </div>
                        <div className={styles.invButtonRow}>
                            <button className={styles.clearSelectionBtn} onClick={handleClearSelection}>
                                Clear selection
                            </button>
                            <button
                                className={styles.cnfrmBtn}
                                onClick={handleInventoryConfirm}
                                disabled={selected.length === 0}
                            >
                                Confirm ({selected.length}/3)
                            </button>
                        </div>
                    </div>
                </>
            )}

            {/* Confirmation sheet */}
            {showConfirmation && (
                <>
                    <div className={styles.overlay} onClick={() => setShowConfirmation(false)} />
                    <div className={styles.confirmationSheet}>
                        <div className={styles.navContainer}>
                            <p>Winner</p>
                            <div onClick={handleOverlayClick} style={{ cursor: 'pointer' }}>
                                <svg width="16" height="16" viewBox="0 0 16 16">
                                    <path d="M1 1L15 15" stroke="white" strokeWidth="1.5" />
                                    <path d="M1 15L15 1" stroke="white" strokeWidth="1.5" />
                                </svg>
                            </div>
                        </div>
                        <div className={styles.confirmationContainer}>
                            <div className={styles.confirmationRow}>
                                <p className={styles.confirmationTeam}>
                                    {selection === 'home'
                                        ? game.homeTeam
                                        : selection === 'draw'
                                            ? 'Draw'
                                            : game.awayTeam
                                    }
                                </p>
                                <p className={styles.oddsBox}>x{odds}</p>
                            </div>
                            <div className={styles.confirmationRow}>
                                <p className={styles.winText}>Your stake</p>
                                <p className={styles.winText}>{totalValue.toFixed(2)}</p>
                            </div>
                            <div className={styles.confirmationRow}>
                                <p className={styles.winText}>Potential win</p>
                                <p className={styles.winText}>{potentialWin}</p>
                            </div>
                            <div className={styles.cardPreview}>
                                {cards
                                    .filter(c => selected.includes(c.id))
                                    .map(c => (
                                        <CardWithCooldown
                                            key={c.id}
                                            imageUrl={c.imageURL}
                                            altText={c.rarity}
                                            cooldownUntil={c.cooldownUntil}
                                            className={styles.cardImg}
                                        />
                                    ))
                                }
                            </div>
                            {error && <p className={styles.error}>{error}</p>}
                            <div className={styles.invButtonRow}>
                                <button className={styles.clearSelectionBtn} onClick={handleClearSelection}>
                                    Clear cards
                                </button>
                                <button className={styles.cnfrmBtn} onClick={handleSubmit}>
                                    Place Bet
                                </button>
                            </div>
                        </div>
                    </div>
                </>
            )}
        </div>
    );
}
